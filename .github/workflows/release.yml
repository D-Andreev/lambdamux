name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'

    - name: List directory contents
      run: |
        echo "Root directory:"
        ls -R
        echo "Go list:"
        go list ./...

    - name: Build
      run: |
        mkdir -p build
        go build -v -o build/lambdamux .
        # If your main package is in a subdirectory, use this instead:
        # go build -v -o build/lambdamux ./cmd/lambdamux

    - name: Run tests
      run: go test -v ./...

    - name: Get merged PR
      id: get-pr
      run: |
        PR_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&base=main&sort=updated&direction=desc&per_page=1" | \
          jq '.[0].number')
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

    - name: Determine version bump
      id: bump
      run: |
        PR_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.get-pr.outputs.pr_number }}" | \
          jq '.labels[].name')
        if echo "$PR_LABELS" | grep -q "major"; then
          echo "bump=major" >> $GITHUB_OUTPUT
        elif echo "$PR_LABELS" | grep -q "minor"; then
          echo "bump=minor" >> $GITHUB_OUTPUT
        else
          echo "bump=patch" >> $GITHUB_OUTPUT
        fi

    - name: Bump version and push tag
      id: tag_version
      uses: anothrNick/github-tag-action@1.35.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: ${{ steps.bump.outputs.bump }}
        WITH_V: true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_version.outputs.new_tag }}
        release_name: Release ${{ steps.tag_version.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/lambdamux
        asset_name: lambdamux
        asset_content_type: application/octet-stream
